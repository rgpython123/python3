HTTPS:

   TLDR: TLS encryption needs two items: 
            - A server certificate,
               which includes a public key and is signed by a CA.
            - A private key that goes with the public key
               included in the certificate.

The encryption and security functionality for HTTP is
 implemented through the Transport Layer Security (TLS)
 protocol. TLS defines a standard way to make any network
 communication channel secure.

When the client establishes a connection with the server
 and requests an encrypted connection, the server responds
 with its SSL Certificate. The certificate acts as identification
 for the server, as it includes the server name and domain.
 To ensure that the information provided by the server is correct,
 the certificate is cryptographically signed by a certificate
 authority, or CA. If the client knows and trusts the CA, it can
 confirm that the certificate signature indeed comes from this
 entity, and with this the client can be certain that the server
 it connected to is legitimate.

After the client verifies the certificate, it creates an encryption
 key to use for the communication with the server. To make sure that
 this key is sent securely to the server, it encrypts it using a
 public key that is included with the server certificate. The server
 is in possession of the private key that goes with that public key
 in the certificate, so it is the only party that is able to decrypt
 the package. From the point when the server receives the encryption
 key all traffic is encrypted with this key that only the client and
 server know.


  Self-Signed Certificate:
    A self-signed certificate is one where the signature is generated
 using the private key that is associated with that same certificate.

    Flask's pyOpenSSL generates a different certificate each time the
 server runs.


Q: Name three Certificate Authorities (CAs).

DigiCert, Entrust & Verisign.
