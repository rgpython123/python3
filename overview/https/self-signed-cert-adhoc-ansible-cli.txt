   *** self-signed-cert-adhoc.txt

   Flask's Werkzeug support the use of "on-the-fly" certificates, which are useful to quickly serve an application over HTTPS without having to create certificates. All you need to do, is add ssl_context='adhoc' to your app.run() call. This creates a Flask application with TLS encryption added

   This option is also available through the Flask CLI if you are using a Flask 1.x release:
$ flask run --cert=adhoc

   To use ad hoc certificates with Flask, you need to install an additional dependency:
$ pip3 install pyopenssl

   When you run the script (or start with flask run if you prefer), you will notice that Flask indicates that it is running an https:// server:
$ python3 test-adhoc.py
 * Running on https://127.0.0.1:5000/ (Press CTRL+C to quit)



$ mkdir ~/testing

$ vim ~/testing/test-adhoc.py
+++
from flask import Flask


app = Flask(__name__)


@app.route("/")
def hello():
    return "Hello World (Adhoc)!"


if __name__ == "__main__":
    app.run(host='0.0.0.0', ssl_context='adhoc')
+++



$ vim ~/testing/requirements.txt
+++
flask
pyopenssl
+++


   Create /home/centos/testing Directory.
$ ansible -i hosts web --key-file ~/user1.pem -u centos -b \
-m shell -a 'ls -l /home/centos'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b \
-m file -a 'dest=/home/centos/testing state=directory \
mode=755 owner=centos group=centos'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b \
-m shell -a 'ls -l /home/centos'



   Install Python 3.6.
$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m yum -a 'name=python36 state=present'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m yum -a 'name=python36-devel state=present'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m yum -a 'name=python36-pip state=present'


   Install GCC.
$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m yum -a 'name=gcc state=present'


   Install OpenSSL.
$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m yum -a 'name=openssl state=present'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m yum -a 'name=openssl-devel state=present'



   Copy the Requirements file and Python script over.
$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m shell -a 'ls -l /home/centos/testing'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m copy -a 'src=~/testing/requirements.txt \
dest=/home/centos/testing/requirements.txt \
owner=centos group=centos mode=644'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m copy -a 'src=~/testing/test-adhoc.py \
dest=/home/centos/testing/test-adhoc.py \
owner=centos group=centos mode=755'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m shell -a 'ls -l /home/centos/testing'



   Setup Python/Pip Socks Proxy Support.
$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m copy -a 'src=~/testing/PySocks-1.7.0-py3-none-any.whl \
dest=/home/centos/testing/PySocks-1.7.0-py3-none-any.whl \
owner=centos group=centos mode=644'

$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m shell -a 'pip3 install \
/home/centos/testing/PySocks-1.7.0-py3-none-any.whl'


   Install Dependencies.
$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m shell -a 'pip3 install --proxy socks5://127.0.0.1:8080 \
-r /home/centos/testing/requirements.txt'


   Run the Application.
$ ansible -i hosts web --key-file ~/user1.pem -u centos -b -f 3 \
-m shell -a 'python3 /home/centos/testing/test-adhoc.py'
