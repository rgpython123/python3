$ vim serializer_demo2.py
+++
import json
import xml.etree.ElementTree as et


class Song:
    def __init__(self, song_id, title, artist):
        self.song_id = song_id
        self.title = title
        self.artist = artist


class SongSerializer:
    def serialize(self, song, format):
        serializer = get_serializer(format)
        return serializer(song)


def get_serializer(format):
    if format == 'JSON':
        return _serialize_to_json
    elif format == 'XML':
        return _serialize_to_xml
    else:
        raise ValueError(format)


def _serialize_to_json(song):
    payload = {
        'id': song.song_id,
        'title': song.title,
        'artist': song.artist
    }
    return json.dumps(payload)


def _serialize_to_xml(song):
    song_element = et.Element('song', attrib={'id': song.song_id})
    title = et.SubElement(song_element, 'title')
    title.text = song.title
    artist = et.SubElement(song_element, 'artist')
    artist.text = song.artist
    return et.tostring(song_element, encoding='unicode')
+++


>>> import serializer_demo2 as sd
>>> song = sd.Song('3', 'Water of Love', 'Dire Straits')
>>> serializer = sd.SongSerializer()

>>> serializer.serialize(song, 'JSON')
'{"id": "1", "title": "Water of Love", "artist": "Dire Straits"}'

>>> serializer.serialize(song, 'XML')
'<song id="1"><title>Water of Love</title><artist>Dire Straits</artist></song>'

>>> serializer.serialize(song, 'YAML')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "./serializer_demo.py", line 13, in serialize
    serializer = get_serializer(format)
  File "./serializer_demo.py", line 23, in get_serializer
    raise ValueError(format)
ValueError: YAML



      Try/Except/Else/Finally Example:
>>> def f(format):
...     try:
...         song_string = serializer.serialize(song, format)
...     except ValueError as e:
...         print("ERROR => Wrong Type: {}".format(e))
...     else:
...         print("Working on {} Format".format(format))
...         print(song_string)
...     finally:
...         print("Completed! Executing clean-up script.")

>>> f('JSON')
Working on JSON Format
{"id": "3", "title": "Water of Love", "artist": "Dire Straits"}
Completed! Executing clean-up script.
>>> 
>>> f('XML')
Working on XML Format
<song id="3"><title>Water of Love</title><artist>Dire Straits</artist></song>
Completed! Executing clean-up script.
>>> 
>>> f('YAML')
ERROR => Wrong Type: YAML
Completed! Executing clean-up script.
