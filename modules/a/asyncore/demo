This module provides the basic infrastructure for writing asynchronous socket service clients and servers.

There are only two ways to have a program on a single processor do “more than one thing at a time.” Multi-threaded programming is the simplest and most popular way to do it, but there is another very different technique, that lets you have nearly all the advantages of multi-threading, without actually using multiple threads. It’s really only practical if your program is largely I/O bound. If your program is processor bound, then pre-emptive scheduled threads are probably what you really need. Network servers are rarely processor bound, however.

If your operating system supports the select() system call in its I/O library (and nearly all do), then you can use it to juggle multiple communication channels at once; doing other work while your I/O is taking place in the “background.” Although this strategy can seem strange and complex, especially at first, it is in many ways easier to understand and control than multi-threaded programming. The asyncore module solves many of the difficult problems for you, making the task of building sophisticated high-performance network servers and clients a snap. For “conversational” applications and protocols the companion asynchat module is invaluable.

The basic idea behind both modules is to create one or more network channels, instances of class asyncore.dispatcher and asynchat.async_chat. Creating the channels adds them to a global map, used by the loop() function if you do not provide it with your own map.

Once the initial channel(s) is(are) created, calling the loop() function activates channel service, which continues until the last channel (including any that have been added to the map during asynchronous service) is closed.

   ***  class asyncore.dispatcher  ***

    The dispatcher class is a thin wrapper around a low-level socket object. To make it more useful, it has a few methods for event-handling which are called from the asynchronous loop. Otherwise, it can be treated as a normal non-blocking socket object.
   create_socket
   listen
   bind
   accept
   connect
   close
   send
   buffer


   ***  asyncore.loop([timeout[, use_poll[, map[, count]]]])  ***

    Enter a polling loop that terminates after count passes or all open channels have been closed. All arguments are optional. The count parameter defaults to None, resulting in the loop terminating only when all channels have been closed. The timeout argument sets the timeout parameter for the appropriate select() or poll() call, measured in seconds; the default is 30 seconds. The use_poll parameter, if true, indicates that poll() should be used in preference to select() (the default is False).

    The map parameter is a dictionary whose items are the channels to watch. As channels are closed they are deleted from their map. If map is omitted, a global map is used. Channels (instances of asyncore.dispatcher, asynchat.async_chat and subclasses thereof) can freely be mixed in the map.
 
   Examples:
   =========

   (1) Basic HTTP Client

   Create a local Apache Webserver.
   Place the below in the DocumentRoot.

# vim index.html
+++
<html>
<header><title>Hello World.</title></header>
<body>
Hello world
</body>
</html>
+++

# vim asyn_client.py
+++
import asyncore
import socket

class HTTPClient(asyncore.dispatcher):

    def __init__(self, host, path):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connect( (host, 80) )
        self.buffer = 'GET %s HTTP/1.0\r\n\r\n' % path

    def handle_connect(self):
        pass

    def handle_close(self):
        self.close()

    def handle_read(self):
        print self.recv(8192)

    def writable(self):
        return (len(self.buffer) > 0)

    def handle_write(self):
        sent = self.send(self.buffer)
        self.buffer = self.buffer[sent:]

client = HTTPClient('127.0.0.1', '/')
asyncore.loop()
+++

# python asyn_client.py

HTTP/1.1 200 OK
Date: Wed, 13 Dec 2017 23:23:50 GMT
Server: Apache/2.4.6 (CentOS) mod_python/3.5.0 Python/2.7.5
Last-Modified: Wed, 13 Dec 2017 23:19:00 GMT
ETag: "57-56040fe1798a1"
Accept-Ranges: bytes
Content-Length: 87
Connection: close
Content-Type: text/html; charset=UTF-8

<html>
<header><title>Hello World.</title></header>
<body>
Hello world
</body>
</html>


   (2) Basic Echo Server

# vim asyn_echo.py
+++
import asyncore
import socket

class EchoHandler(asyncore.dispatcher_with_send):

    def handle_read(self):
        data = self.recv(8192)
        if data:
            self.send(data)

class EchoServer(asyncore.dispatcher):

    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is not None:
            sock, addr = pair
            print 'Incoming connection from %s' % repr(addr)
            handler = EchoHandler(sock)

server = EchoServer('localhost', 8080)
asyncore.loop()
+++

   *** Server ***
# python asyn_echo.py
Incoming connection from ('127.0.0.1', 47778)

   *** Client ***
# python3
>>> import socket
>>> s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
>>> server_address = ('localhost', 8080)
>>> s.connect(server_address)
>>> message = b'This is the message.  It will be repeated.'
>>> s.sendall(message)
>>> data = s.recv(8192)
>>> data
b'This is the message.  It will be repeated.'
